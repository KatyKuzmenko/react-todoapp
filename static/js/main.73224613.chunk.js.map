{"version":3,"sources":["store/actionTypes.js","api/api.js","components/Loader.jsx","components/Modal.jsx","components/NewTodoInput.jsx","components/TodoFooter.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","index.js","store/reducer.js"],"names":["TODOS_INIT","TODO_ADD","TODO_DELETE","TODO_TOGGLE","TODO_EDIT","TODOS_TOGGLE_ALL","TODOS_CLEAR_COMPLETED","request","url","options","fetch","then","response","ok","json","status","statusText","remove","method","patch","data","headers","body","JSON","stringify","createTodo","title","updateTodo","todoId","updateStatus","iscompleted","toggleAllTodos","deleteTodo","deleteCompletedTodos","React","Component","NewTodoInput","addTodo","event","key","target","value","id","props","onAdding","catch","err","console","warn","className","placeholder","onKeyDown","this","connect","state","store","dispatch","type","TodoListFooter","clearCompleted","onClear","activeTodos","filter","todo","completedTodos","length","href","onClick","Todo","isEditing","toggleTodo","onToggle","dataset","inputId","checked","todos","editTitle","setState","setTitleOnEnter","trim","onChangeTitle","setTitleOnBlur","openModalWindow","onChange","onDoubleClick","defaultValue","onBlur","TodoList","filterType","toggleAll","onToggleAll","visibleTodos","all","active","completed","htmlFor","map","App","todosFromServer","onInitialize","log","createStore","action","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAaA,G,MAAa,cACbC,EAAW,WACXC,EAAc,cACdC,EAAc,cACdC,EAAY,YACZC,EAAmB,mBACnBC,EAAwB,wBCJ/BC,EAAU,SAACC,EAAKC,GACpB,OAAOC,MAAM,GAAD,OAHG,yBAGH,OAAeF,GAAOC,GAASE,MAAK,SAACC,GAC/C,OAAKA,EAASC,GAIPD,EAASE,OAHR,GAAN,OAAUF,EAASG,OAAnB,cAA+BH,EAASI,gBAOxCC,EAAS,SAACT,GACd,OAAOD,EAAQC,EAAK,CAClBU,OAAQ,YAcNC,EAAQ,SAACX,EAAKY,GAClB,OAAOb,EAAQC,EAAK,CAClBU,OAAQ,QACRG,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUJ,MAIZK,EAAa,SAACC,GACzB,OArBiBN,EAqBK,CACpBM,SArBKnB,EAoBK,SApBQ,CAClBW,OAAQ,OACRG,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUJ,KANZ,IAAMA,GA0BNO,EAAa,SAACC,EAAQF,GACjC,OAAOP,EAAM,UAAD,OAAWS,GAAU,CAAEF,WAGxBG,EAAe,SAACD,EAAQE,GACnC,OAAOX,EAAM,UAAD,OAAWS,GAAU,CAAEE,iBAGxBC,EAAiB,SAACD,GAC7B,OAAOX,EAAM,SAAU,CAAEW,iBAGdE,EAAa,SAACJ,GACzB,OAAOX,EAAO,UAAD,OAAWW,KAGbK,EAAuB,WAClC,OAAOhB,EAAO,Y,UC3DYiB,IAAMC,UCGPD,IAAMC,U,MCA3BC,E,4MACJC,QAAU,SAACC,GACS,UAAdA,EAAMC,KAAoBD,EAAME,OAAOC,OAI3ChB,EAAWa,EAAME,OAAOC,OACrB9B,MAAK,SAAC+B,GACL,EAAKC,MAAMC,SAASF,EAAIJ,EAAME,OAAOC,OACrCH,EAAME,OAAOC,MAAQ,MAEtBI,OAAM,SAACC,GAAD,OAASC,QAAQC,KAAKF,O,4CAGjC,WACE,OACE,yBAAQG,UAAU,SAAlB,UACE,uCACA,uBACEA,UAAU,WACVC,YAAY,yBACZC,UAAWC,KAAKf,iB,GArBCH,IAAMC,WA4BlBkB,eACb,SAAAC,GAAK,MAAK,CACRC,MAAOD,MAET,SAAAE,GAAQ,MAAK,CACXZ,SAAU,SAACF,EAAIhB,GACb8B,EAAS,CAACC,KAAMxD,EAAUQ,QAAS,CAAEiC,KAAIhB,eANhC2B,CASbjB,GCrCIsB,E,4MACJC,eAAiB,WACf1B,IAAuBtB,MAAK,WAC1B,EAAKgC,MAAMiB,c,4CAIf,WACE,IACMC,EAAcT,KAAKT,MAAMY,MAAMO,QAAO,SAACC,GAAD,OAAWA,EAAKjC,eACtDkC,EAAiBZ,KAAKT,MAAMY,MAAMO,QAAO,SAACC,GAAD,OAAUA,EAAKjC,eAE9D,OACEsB,KAAKT,MAAMY,MAAMU,OAAS,GACxB,yBAAQhB,UAAU,SAAlB,UACE,uBAAMA,UAAU,aAAhB,UAA8BY,EAAYI,OAA1C,iBACA,qBAAIhB,UAAU,UAAd,UACE,6BACE,mBACEiB,KAAK,KACLjB,UAAkC,WAFpC,mBAOF,6BACE,mBACEiB,KAAK,WACL,cAAY,SACZjB,UAAkD,GAHpD,sBAQF,6BACE,mBACEiB,KAAK,cACLjB,UAAqD,GACrD,cAAY,YAHd,4BASHe,EAAeC,OAAS,GACvB,wBAAQhB,UAAU,kBAAkBkB,QAASf,KAAKO,eAAlD,oC,GA7CiBzB,IAAMC,WAuDpBkB,eACb,SAAAC,GAAK,MAAK,CACRC,MAAOD,MAET,SAAAE,GAAQ,MAAK,CACXI,QAAS,WACPJ,EAAS,CAACC,KAAMnD,QANP+C,CASbK,GChEIU,E,4MACJd,MAAQ,CACNe,WAAW,G,EAGbC,WAAa,SAAChC,GACZ,EAAKK,MAAM4B,UAAUjC,EAAME,OAAOgC,QAAQC,QAASnC,EAAME,OAAOkC,SAChE7C,GAAcS,EAAME,OAAOgC,QAAQC,QAASnC,EAAME,OAAOkC,SACtD/D,MAAK,SAACgE,GAAD,OAAWA,KAChB9B,OAAM,SAACC,GAAD,OAASC,QAAQC,KAAKF,O,EAGjC8B,UAAY,WACV,EAAKC,SAAS,CAACR,WAAW,K,EAG5BS,gBAAkB,SAACxC,GACZA,EAAME,OAAOC,MAAMsC,QAAwB,UAAdzC,EAAMC,MAGxC,EAAKI,MAAMqC,eAAe1C,EAAME,OAAOE,GAAIJ,EAAME,OAAOC,OAExDd,GAAYW,EAAME,OAAOE,GAAIJ,EAAME,OAAOC,OACzC9B,MAAK,SAACgE,GAAD,OAAWA,KAChB9B,OAAM,SAACC,GAAD,OAASC,QAAQC,KAAKF,MAC7B,EAAK+B,SAAS,CAACR,WAAW,M,EAG5BY,eAAiB,SAAC3C,GACXA,EAAME,OAAOC,MAAMsC,SAGxB,EAAKpC,MAAMqC,eAAe1C,EAAME,OAAOE,GAAIJ,EAAME,OAAOC,OACxDd,GAAYW,EAAME,OAAOE,GAAIJ,EAAME,OAAOC,OACzC9B,MAAK,SAACgE,GAAD,OAAWA,KAChB9B,OAAM,SAACC,GAAD,OAASC,QAAQC,KAAKF,MAC7B,EAAK+B,SAAS,CAACR,WAAW,M,EAG5Ba,gBAAkB,a,4CAElB,WACE,MAAmC9B,KAAKT,MAAMoB,KAAtCrB,EAAR,EAAQA,GAAIhB,EAAZ,EAAYA,MAAOI,EAAnB,EAAmBA,YACXuC,EAAcjB,KAAKE,MAAnBe,UACR,OACE,qBACEpB,UAAWnB,EAAc,4BAA8B,kBACvD,eAAcY,EAFhB,UAIE,sBAAKO,UAAWoB,EAAY,iBAAmB3B,EAAK,OAASA,EAA7D,UACE,uBACEA,GAAI,QAAUA,EACd,gBAAeA,EACfO,UAAU,SACVQ,KAAK,WACLiB,QAAS5C,EACTqD,SAAU/B,KAAKkB,aAGjB,uBACErB,UAAU,aACV,gBAAeP,EACf0C,cAAehC,KAAKwB,UAHtB,SAIGlD,IAGH,wBAAQuB,UAAU,UAAU,kBAAiBP,EAAIyB,QAASf,KAAK8B,qBAGjE,uBACEjC,UAAWoB,EAAY,kBAAoB3B,EAAK,4BAA8BA,EAC9EA,GAAIA,EACJe,KAAK,OACL4B,aAAc3D,EACdyB,UAAWC,KAAK0B,gBAChBQ,OAAQlC,KAAK6B,wB,GA3EJ/C,IAAMC,WAkFVkB,eACb,SAAAC,GAAK,MAAK,CACRC,MAAOD,MAET,SAAAE,GAAQ,MAAK,CACXe,SAAU,SAAC7B,EAAIZ,GACb0B,EAAS,CAACC,KAAMtD,EAAaM,QAAS,CAAEiC,KAAIZ,kBAE9CkD,cAAe,SAACtC,EAAIhB,GAClB8B,EAAS,CAACC,KAAMrD,EAAWK,QAAS,CAAEiC,KAAIhB,eATjC2B,CAYbe,GC7FImB,E,4MACJjC,MAAQ,CACNkC,WAAY,O,EAGdC,UAAY,SAACnD,GACX,EAAKK,MAAM+C,YAAYpD,EAAME,OAAOkC,SACpC3C,EAAeO,EAAME,OAAOkC,SACzB/D,MAAK,SAACgE,GAAD,OAAWA,KAChB9B,OAAM,SAACC,GAAD,OAASC,QAAQC,KAAKF,O,4CAGjC,WACE,IAAQ0C,EAAepC,KAAKE,MAApBkC,WACF3B,EAAcT,KAAKT,MAAMY,MAAMO,QAAO,SAACC,GAAD,OAAWA,EAAKjC,eACtDkC,EAAiBZ,KAAKT,MAAMY,MAAMO,QAAO,SAACC,GAAD,OAAUA,EAAKjC,eAQxD6D,EANe,CACnBC,IAAKxC,KAAKT,MAAMY,MAChBsC,OAAQhC,EACRiC,UAAW9B,GAGqBwB,GAClC,OACE,yBAASvC,UAAWG,KAAKT,MAAMY,MAAMU,OAAS,EAAI,OAAS,iBAA3D,SACE,uBAAMhB,UAAU,uBAAhB,UACE,uBACEP,GAAG,aACHO,UAAU,aACVQ,KAAK,WACLiB,QAAgC,IAAvBb,EAAYI,OACrBkB,SAAU/B,KAAKqC,YAEjB,uBAAOM,QAAQ,eACf,oBAAI9C,UAAU,YAAd,SACG0C,EAAaK,KAAI,SAACjC,GAAD,OAChB,cAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAKrB,kB,GArCnBR,IAAMC,WA8CdkB,eACb,SAAAC,GAAK,MAAK,CACRC,MAAOD,MAET,SAAAE,GAAQ,MAAK,CACXkC,YAAa,SAAC5D,GACZ0B,EAAS,CAACC,KAAMpD,EAAkBI,QAAS,CAACqB,qBANnCuB,CASbkC,GCjDIU,E,uKACJ,WAAqB,IAAD,OPmDQ1F,EAAQ,UOjDjCI,MAAK,SAAAuF,GACJ,EAAKvD,MAAMwD,aAAaD,MAEzBrD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,KAAKF,Q,oBAG7B,WAEE,OADAC,QAAQqD,IAAIhD,KAAKT,MAAMY,OAErB,0BAASN,UAAU,UAAnB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAfUf,IAAMC,WA0BTkB,eACb,SAAAC,GAAK,MAAK,CACRC,MAAOD,MAET,SAAAE,GAAQ,MAAK,CACXZ,SAAU,SAACF,EAAIhB,GACb8B,EAAS,CAACC,KAAMxD,EAAUQ,QAAS,CAAEiC,KAAIhB,YAE3CyE,aAAc,SAACxB,GACbnB,EAAS,CAACC,KAAMzD,EAAYS,QAASkE,QAT5BtB,CAYb4C,G,4CC1CW1C,EAAQ8C,aCEN,WAA2C,IAArB/C,EAAoB,uDAAZ,GAAIgD,EAAQ,uCACvD,OAAQA,EAAO7C,MACb,KAAKzD,EACH,OAAO,YAAIsG,EAAO7F,SAEpB,KAAKR,EACH,MAAM,GAAN,mBACKqD,GADL,CAEE,CACEZ,GAAI4D,EAAO7F,QAAQiC,GACnBhB,MAAO4E,EAAO7F,QAAQiB,MACtBI,aAAa,KAInB,KAAK3B,EACH,OAAOmD,EAAM0C,KAAI,SAACjC,GAChB,OAAIA,EAAKrB,KAAO4D,EAAO7F,QAAQiC,GACtB,2BAAKqB,GAAZ,IAAkBjC,YAAawE,EAAO7F,QAAQqB,cAGzCiC,KAGX,KAAK7D,EACH,OAAOoD,EAAMQ,QAAO,SAACC,GAAD,OAAUuC,EAAO7F,QAAQiC,KAAOqB,EAAKrB,MAE3D,KAAKtC,EACH,OAAOkD,EAAM0C,KAAI,SAACjC,GAChB,OAAIA,EAAKrB,KAAO4D,EAAO7F,QAAQiC,GACtB,2BAAKqB,GAAZ,IAAkBrC,MAAO4E,EAAO7F,QAAQiB,QAGnCqC,KAGX,KAAK1D,EACH,OAAOiD,EAAM0C,KAAI,SAACjC,GAChB,OAAO,2BAAKA,GAAZ,IAAkBjC,YAAawE,EAAO7F,QAAQqB,iBAGlD,KAAKxB,EACH,OAAOgD,EAAMQ,QAAO,SAACC,GAAD,OAA+B,IAArBA,EAAKjC,eAErC,QACE,OAAOwB,KD/CkCiD,YAAgBC,MAE/DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUpD,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJqD,SAASC,eAAe,W","file":"static/js/main.73224613.chunk.js","sourcesContent":["export const TODOS_INIT = 'todos/init'\nexport const TODO_ADD = 'todo/add'\nexport const TODO_DELETE = 'todo/delete'\nexport const TODO_TOGGLE = 'todo/toggle'\nexport const TODO_EDIT = 'todo/edit'\nexport const TODOS_TOGGLE_ALL = 'todos/toggle-all'\nexport const TODOS_CLEAR_COMPLETED = 'todos/clear-completed'\n","const BASE_URL = 'http://localhost:3001'\n\nconst request = (url, options) => {\n  return fetch(`${BASE_URL}${url}`, options).then((response) => {\n    if (!response.ok) {\n      return `${response.status} - ${response.statusText}`\n    }\n\n    return response.json()\n  })\n}\n\nconst remove = (url) => {\n  return request(url, {\n    method: 'DELETE',\n  })\n}\n\nconst post = (url, data) => {\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n}\n\nconst patch = (url, data) => {\n  return request(url, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n}\n\nexport const createTodo = (title) => {\n  return post('/todos', {\n    title,\n  })\n}\n\nexport const updateTodo = (todoId, title) => {\n  return patch(`/todos/${todoId}`, { title })\n}\n\nexport const updateStatus = (todoId, iscompleted) => {\n  return patch(`/todos/${todoId}`, { iscompleted })\n}\n\nexport const toggleAllTodos = (iscompleted) => {\n  return patch('/todos', { iscompleted })\n}\n\nexport const deleteTodo = (todoId) => {\n  return remove(`/todos/${todoId}`)\n}\n\nexport const deleteCompletedTodos = () => {\n  return remove('/todos/')\n}\n\nexport const getTodos = () => request('/todos')\n\nexport const getTodo = (todoId) => request(`/todos/${todoId}`)\n","import React from 'react'\n\nexport class Loader extends React.Component {\n  render() {\n    return (\n        <div className='loader'>\n          Loading\n          <span className='loader-span'></span>\n        </div>\n      )\n  }\n}\n","import React from 'react'\nimport { deleteTodo } from '../api/api'\n// import store from '../store'\n// import { removeTodo } from '../store/actions'\n\nexport class Modal extends React.Component {\n  deleteTodoAndCloseModal = () => {\n    deleteTodo()\n      .then(() => {\n      })\n      .catch(err => console.warn(err))\n  }\n\n  render() {\n    return (\n      <div className='modal'>\n        <div className='modal__content'>\n          <button className='modal__close-button'></button>\n          <p className='modal__title'>Are you sure You want to delete this task?</p>\n          <div className='button-container'>\n            <button className='modal__button'>Delete</button>\n            <button className='modal__button'>Cancel</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { createTodo } from '../api/api'\nimport { TODO_ADD } from '../store/actionTypes'\n\nclass NewTodoInput extends React.Component {\n  addTodo = (event) => {\n    if (event.key !== 'Enter' || !event.target.value) {\n      return\n    }\n\n    createTodo(event.target.value)\n      .then((id) => {\n        this.props.onAdding(id, event.target.value)\n        event.target.value = ''\n      })\n      .catch((err) => console.warn(err))\n  }\n\n  render() {\n    return (\n      <header className='header'>\n        <h1>todos</h1>\n        <input\n          className='new-todo'\n          placeholder='What needs to be done?'\n          onKeyDown={this.addTodo} \n        />\n      </header>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    store: state\n  }),\n  dispatch => ({\n    onAdding: (id, title) => {\n      dispatch({type: TODO_ADD, options: { id, title }})\n    }\n  })\n)(NewTodoInput)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { deleteCompletedTodos } from '../api/api'\nimport { TODOS_CLEAR_COMPLETED } from '../store/actionTypes'\n\nclass TodoListFooter extends React.Component {\n  clearCompleted = () => {\n    deleteCompletedTodos().then(() => {\n      this.props.onClear()\n    })\n  }\n\n  render() {\n    const filterType = 'all'\n    const activeTodos = this.props.store.filter((todo) => !todo.iscompleted)\n    const completedTodos = this.props.store.filter((todo) => todo.iscompleted)\n\n    return (\n      this.props.store.length > 0 && (\n        <footer className='footer'>\n          <span className='todo-count'>{activeTodos.length} items left</span>\n          <ul className='filters'>\n            <li>\n              <a\n                href='#/'\n                className={filterType === 'all' ? 'selected' : ''}\n              >\n                All\n              </a>\n            </li>\n            <li>\n              <a\n                href='#/active'\n                data-filter='active'\n                className={filterType === 'active' ? 'selected' : ''}\n              >\n                Active\n              </a>\n            </li>\n            <li>\n              <a\n                href='#/completed'\n                className={filterType === 'completed' ? 'selected' : ''}\n                data-filter='completed'\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n          {completedTodos.length > 0 && (\n            <button className='clear-completed' onClick={this.clearCompleted}>\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    store: state\n  }),\n  dispatch => ({\n    onClear: () => {\n      dispatch({type: TODOS_CLEAR_COMPLETED})\n    }\n  })\n)(TodoListFooter)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { updateStatus, updateTodo } from '../api/api'\nimport { TODO_EDIT, TODO_TOGGLE } from '../store/actionTypes'\n\nclass Todo extends React.Component {\n  state = {\n    isEditing: false\n  }\n\n  toggleTodo = (event) => {\n    this.props.onToggle(+event.target.dataset.inputId, event.target.checked)\n    updateStatus(+event.target.dataset.inputId, event.target.checked)\n      .then((todos) => todos)\n      .catch((err) => console.warn(err))\n  }\n\n  editTitle = () => {\n    this.setState({isEditing: true})\n  }\n\n  setTitleOnEnter = (event) => {\n    if (!event.target.value.trim() || event.key !== 'Enter') {\n      return\n    }\n    this.props.onChangeTitle(+event.target.id, event.target.value)\n\n    updateTodo(+event.target.id, event.target.value)\n    .then((todos) => todos)\n    .catch((err) => console.warn(err))\n    this.setState({isEditing: false})\n  }\n\n  setTitleOnBlur = (event) => {\n    if (!event.target.value.trim()) {\n      return\n    }\n    this.props.onChangeTitle(+event.target.id, event.target.value)\n    updateTodo(+event.target.id, event.target.value)\n    .then((todos) => todos)\n    .catch((err) => console.warn(err))\n    this.setState({isEditing: false})\n  }\n\n  openModalWindow = () => {}\n\n  render() {\n    const { id, title, iscompleted } = this.props.todo\n    const { isEditing } = this.state\n    return (\n      <li\n        className={iscompleted ? 'todo-list__item completed' : 'todo-list__item'}\n        data-todo-id={id}\n      >\n        <div className={isEditing ? 'invisible view' + id : 'view' + id}>\n          <input\n            id={'todo-' + id}\n            data-input-id={id}\n            className='toggle'\n            type='checkbox'\n            checked={iscompleted}\n            onChange={this.toggleTodo}\n          />\n\n          <label\n            className='todo-title'\n            data-label-id={id}\n            onDoubleClick={this.editTitle}>\n            {title}\n          </label>\n\n          <button className='destroy' data-destroy-id={id} onClick={this.openModalWindow}></button>\n        </div>\n\n        <input\n          className={isEditing ? 'edit-field edit' + id : 'edit-field invisible edit' + id}\n          id={id}\n          type='text'\n          defaultValue={title}\n          onKeyDown={this.setTitleOnEnter}\n          onBlur={this.setTitleOnBlur}\n        />\n      </li>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    store: state\n  }),\n  dispatch => ({\n    onToggle: (id, iscompleted) => {\n      dispatch({type: TODO_TOGGLE, options: { id, iscompleted }})\n    },\n    onChangeTitle: (id, title) => {\n      dispatch({type: TODO_EDIT, options: { id, title }})\n    }\n  })\n)(Todo)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { toggleAllTodos } from '../api/api'\nimport { TODOS_TOGGLE_ALL } from '../store/actionTypes'\nimport Todo from './Todo'\n\nclass TodoList extends React.Component {\n  state = {\n    filterType: 'all',\n  }\n\n  toggleAll = (event) => {\n    this.props.onToggleAll(event.target.checked)\n    toggleAllTodos(event.target.checked)\n      .then((todos) => todos)\n      .catch((err) => console.warn(err))\n  }\n\n  render() {\n    const { filterType } = this.state\n    const activeTodos = this.props.store.filter((todo) => !todo.iscompleted)\n    const completedTodos = this.props.store.filter((todo) => todo.iscompleted)\n\n    const currentTodos = {\n      all: this.props.store,\n      active: activeTodos,\n      completed: completedTodos,\n    }\n\n    const visibleTodos = currentTodos[filterType]\n    return (\n      <section className={this.props.store.length > 0 ? 'main' : 'main invisible'}>\n        <span className='toggle-all-container'>\n          <input\n            id='toggle-all'\n            className='toggle-all'\n            type='checkbox'\n            checked={activeTodos.length === 0}\n            onChange={this.toggleAll}\n          />\n          <label htmlFor='toggle-all'></label>\n          <ul className='todo-list'>\n            {visibleTodos.map((todo) => (\n              <Todo todo={todo} key={todo.id} />\n            ))}\n          </ul>\n        </span>\n      </section>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    store: state\n  }),\n  dispatch => ({\n    onToggleAll: (iscompleted) => {\n      dispatch({type: TODOS_TOGGLE_ALL, options: {iscompleted}})\n    }\n  })\n)(TodoList)","import React from 'react'\nimport './styles/style.css'\nimport { TODOS_INIT, TODO_ADD } from './store/actionTypes'\n\nimport { getTodos } from './api/api'\nimport Loader from './components/Loader'\nimport Modal from './components/Modal'\nimport NewTodoInput from './components/NewTodoInput'\nimport TodoListFooter from './components/TodoFooter'\nimport TodoList from './components/TodoList'\nimport { connect } from 'react-redux'\n\nclass App extends React.Component {\n  componentDidMount() {\n    getTodos()\n    .then(todosFromServer => {\n      this.props.onInitialize(todosFromServer)\n    })\n    .catch(err => console.warn(err))\n  }\n\n  render() {\n    console.log(this.props.store);\n    return (\n      <section className='todoapp'>\n        <NewTodoInput />\n        <TodoList />\n        <TodoListFooter />\n        {/* <Modal /> */}\n        {/* <Loader /> */}\n      </section>\n    )\n  }\n  \n}\n\n\n\nexport default connect(\n  state => ({\n    store: state\n  }),\n  dispatch => ({\n    onAdding: (id, title) => {\n      dispatch({type: TODO_ADD, options: { id, title }})\n    },\n    onInitialize: (todos) => {\n      dispatch({type: TODOS_INIT, options: todos})\n    }\n  })\n)(App)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { createStore, applyMiddleware } from 'redux'\nimport todosReducer from './store/reducer'\nimport { Provider } from 'react-redux'\nimport logger from 'redux-logger'\n\nexport const store = createStore(todosReducer, applyMiddleware(logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","import {\n  TODOS_INIT,\n  TODO_ADD,\n  TODO_DELETE,\n  TODO_TOGGLE,\n  TODOS_CLEAR_COMPLETED,\n  TODOS_TOGGLE_ALL,\n  TODO_EDIT\n} from './actionTypes'\n\nexport default function todosReducer(state = [], action) {\n  switch (action.type) {\n    case TODOS_INIT:\n      return [...action.options]\n\n    case TODO_ADD:\n      return [\n        ...state,\n        {\n          id: action.options.id,\n          title: action.options.title,\n          iscompleted: false,\n        },\n      ]\n\n    case TODO_TOGGLE:\n      return state.map((todo) => {\n        if (todo.id === action.options.id) {\n          return { ...todo, iscompleted: action.options.iscompleted }\n        }\n\n        return todo\n      })\n\n    case TODO_DELETE:\n      return state.filter((todo) => action.options.id !== todo.id)\n\n    case TODO_EDIT:\n      return state.map((todo) => {\n        if (todo.id === action.options.id) {\n          return { ...todo, title: action.options.title }\n        }\n\n        return todo\n      })\n\n    case TODOS_TOGGLE_ALL:\n      return state.map((todo) => {\n        return { ...todo, iscompleted: action.options.iscompleted }\n      })\n\n    case TODOS_CLEAR_COMPLETED:\n      return state.filter((todo) => todo.iscompleted === false)\n\n    default:\n      return state\n  }\n}\n"],"sourceRoot":""}